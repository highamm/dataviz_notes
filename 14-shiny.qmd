---
title: "Shiny Introduction"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---

```{r}
library(tidyverse)
library(readxl)
theme_set(theme_minimal())

df <- read_excel("data/slu_graduates_17_23.xlsx")

## fixes error in the data
df <- df |> mutate(across(everything(),
                           .fns = ~replace(., . ==  "STATS" , "STAT")))

df_long <- df |> pivot_longer(4:9, names_to = "type",
                              values_to = "discipline")

df_major <- df_long |>
  filter(type == "major1" | type == "major2" | type == "major3")



df_major |> filter(discipline == "STAT") |>
  group_by(sex) |>
  summarise(n_student = n())




df_stat <- df_major |> filter(discipline == "STAT") 

df_statfull <- semi_join(df_long, df_stat, by = "adm_id") |>
  filter(type == "major1" |
           type == "major2" | 
           type == "major3")

df_nostat <- df_statfull |> filter(discipline != "STAT" &
                              !is.na(discipline)) |>
  group_by(discipline) |>
  summarise(nstudent = n()) |>
  mutate(discipline = fct_reorder(discipline, nstudent))

ggplot(data = df_nostat, aes(x = discipline, y = nstudent)) +
  geom_segment(aes(y = 0, yend = nstudent, xend = discipline),
               colour = "brown") +
  geom_point(colour = "darkred") + 
  coord_flip() +
  theme_minimal()
```

```{r}
## install.packages("shiny")
library(shiny)
```

```{r}
library(shiny)

unique_major_vec <- df_major |>
  mutate(discipline = factor(discipline)) |>
  pull(discipline) |> levels()
## getting all of the unique values of discipline


ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(selectInput("major_choice",
                             label = "Choose a Major:",
                 choices = unique_major_vec),
                 sliderInput("n_majors",
                             label = "Choose Minimum:",
                             min = 1, max = 15,
                             value = 1, step = 1),
                 radioButtons("major_or_minor", 
                              label = "Choose Majors or Minors",
                              choices = c("major", "minor"))
                 ),
    mainPanel(
      plotOutput("major_plot"),
      tableOutput("sex_table")
    )
  )
)

server <- function(input, output, session) {
  
  major_react <- reactive({
    df_stat <- df_major |> filter(discipline == input$major_choice) 
    
    df_statfull <- semi_join(df_long, df_stat, by = "adm_id") |>
      filter(str_detect(type, pattern = input$major_or_minor) == TRUE)
    
    df_nostat <- df_statfull |> filter(discipline != input$major_choice &
                                         !is.na(discipline)) |>
      group_by(discipline) |>
      summarise(nstudent = n()) |>
      mutate(discipline = fct_reorder(discipline, nstudent))
    
    df_nostat |> filter(nstudent >= input$n_majors)
  })
  
  output$major_plot <- renderPlot({
    ggplot(data = major_react(), aes(x = discipline, y = nstudent)) +
      geom_segment(aes(y = 0, yend = nstudent, xend = discipline),
                   colour = "brown") +
      geom_point(colour = "darkred") + 
      coord_flip() +
      theme_minimal(base_size = 29)
  })
  
  output$sex_table <- renderTable({
    
    df_major |> filter(discipline == input$major_choice) |>
      group_by(sex) |>
      summarise(n_student = n())
    
  })
  
  
}

shinyApp(ui, server)
```