---
title: "Other Topics"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---

## Section 11.2: Large Data

```{r}
library(tidyverse)
diamonds |> nrow()

ggplot(data = diamonds, aes(x = carat, y = price)) +
  geom_point()

ggplot(data = diamonds, aes(x = carat, y = price)) +
  geom_hex() +
  scale_fill_viridis_c() +
  theme_minimal()
## from this plot, we can more easily
## see the number of diamonds and we can
## see that most diamonds are low carat and
## low price (but we can no longer use
## colour as an aesthetic)
```

Really large n

```{r}
library(tidyverse)
n <- 10000000
x <- rnorm(n, 0, 1)
y <- x * rgamma(n, 3, 2)
df <- tibble(x = x, y = y)

df_small <- df |> slice_sample(n = 10000)
ggplot(data = df_small, aes(x = x, y = y)) +
  geom_point(alpha = 0.2) +
  geom_smooth()
## a downside is that you cannot see
## any extreme outliers
```

```{r}
## install.packages("openintro")
library(openintro)
mlb_small <- mlb_players_18 |> filter(games > 50 & position != "P") ## only look at players 
## who play at least 50 games in the season and are not pitchers

library(GGally)
ggpairs(data = mlb_small, columns = 6:11)

ggcorr(data = mlb_small |> dplyr::select(4:ncol(mlb_small)))

```



```{r}
library(faraway)
library(broom)
mod1 <- lm(brozek ~ weight, data = fat)
mod1 |> tidy()

library(GGally)

ggpairs(fat, columns = c("brozek", "weight", "thigh", "adipos"))
mod <- lm(brozek ~ weight + thigh + adipos, data = fat)
mod |> tidy()

library(modelr)
grid <- fat |>
  data_grid(
    weight = seq_range(weight, n = 10),
    thigh = fat |> pull(thigh) |> median(),
    adipos = fat |> pull(adipos) |> median()
  )

fat_aug <- augment(mod, newdata = grid, interval = "confidence")
ggplot(data = fat_aug, aes(x = weight, y = .fitted)) +
  geom_line(linewidth = 1.7, colour = "blue") +
  geom_ribbon(aes(ymin = .lower, ymax = .upper), fill = "lightblue", alpha = 0.3) +
  theme_minimal() +
  geom_point(data = fat, aes(y = brozek), alpha = 0.7) +
  labs(caption = "Thigh and Adipos fixed at Median values")
```

## Section 11.4: Network Analysis

Exercise 1a. The nodes (vertices) are the different majors. The edges will represent if two majors are "connected" through a student or students that double-major in those two majors.

Exercise 1b. The third scenario because we are most interested in how students social networks are connected to other students. First, a line plot; second, a lollipop plot, and fourth, a scatterplot.

```{r}
library(tidyverse)
library(readxl)
library(here)
df <- read_excel(here::here("data/slu_graduates_17_23.xlsx"))

## fixes error in the data
df <- df |> mutate(across(everything(),
                          .fns = ~replace(., . ==  "STATS" , "STAT")))

majors_long <- df |> filter(!is.na(major3) | !is.na(major2)) |>
  pivot_longer(c(major1, major2, major3),
               names_to = "major_num",
               values_to = "major") |>
  filter(!is.na(major)) |>
  dplyr::select(-minor1, -sex, -minor2, -minor3, -graduation_year)
majors_long

network_df <- majors_long |>
  group_by(adm_id) |>
  reframe(test = t(combn(major, 2))) |>
  mutate(vertex1 = test[ ,1],
         vertex2 = test[ ,2]) |>
  dplyr::select(-test)
network_df
```

Exercise 2. `reframe()` relaxes the assumption of `summarise()` that there should be only one row per group returned.

Exercise 3. For triple majors, we want all three combinations of their majors to be 3 rows in the data set (A, B and A, C and B, C)

```{r}
network_sum <- network_df |> mutate(major_first = if_else(vertex1 > vertex2,
                                           true = vertex2,
                                           false = vertex1),
                     major_second = if_else(vertex1 > vertex2,
                                            true = vertex1,
                                            false = vertex2)) |>
  dplyr::select(-vertex1, -vertex2) |>
  group_by(major_first, major_second) |>
  summarise(n_majors = n()) |>
  filter(n_majors >= 5) ## only keep combos with 5 or more students
network_sum
```

Exercise 4. We want to count up a PHYS-MATH double in the same group as a MATH-PHYS double. One way to deal with this is to always put the first alphabetical major in one column and second alphabetical in another.

Exercise 5. The `filter()` will reduce the number of edges when we eventually make the network graph, resulting in a cleaner look while sacrificing some information.

```{r}
library(tidygraph)

nodes <- df |> filter(!is.na(major3) | !is.na(major2)) |>
  pivot_longer(c(major1, major2, major3),
               names_to = "major_num",
               values_to = "major") |>
  filter(!is.na(major)) |>
  distinct(major) |> ## keep only one row for each unique major
  rename(label = major) |>
  ## only keep the majors that are found in network_sum
  filter(label %in% c(network_sum |> pull(major_first),
                      network_sum |> pull(major_second))) |>
  rowid_to_column("id") |>
  mutate(major_type = case_when(label %in% c("MATH", "STAT", "CS", "EC_MA") ~ "MCSS",
                                label %in% c("BIOL", "PSYC", "PHYS") ~ "Science",
                                label %in% c("ECON", "EN_EC", "EC_SP", "SOC", "ANTH", "GOVT", "BUSLA") ~ "Social Science",
                                .default = "Arts and Humanities"))
nodes

edges <- left_join(network_sum, nodes, by = join_by(major_first == label)) |>
  rename(from = "id") |>
  left_join(nodes, by = join_by(major_second == label)) |>
  rename(to = "id") |>
  ungroup() |>
  dplyr::select(to, from, n_majors)
edges

## tbl_graph is from tidygraph and makes an object
## that can be used with ggraph
network_obj <- tbl_graph(nodes = nodes,
                         edges = edges, directed = FALSE)
network_obj
```

Exercise 6. A directed network graph would incorporate thbe "direction" of the passes between hockey players, so it would make more sense here.


```{r}
library(ggraph)

ggraph(network_obj |> mutate(centrality = centrality_authority()),
                            layout = "stress") +
  geom_edge_link(aes(width = n_majors), alpha = 0.7,
                 show.legend = FALSE) +
  geom_node_point(aes(colour = major_type,
                      size = centrality)) +
  scale_edge_width(range = c(0.5, 3)) +
  geom_node_text(aes(label = label), repel = TRUE) +
  scale_colour_viridis_d() +
  guides(size = "none")
```

## Your Turn

Your Turn 1 through 3

```{r}
## set.seed() sets R's random number generator
## so that we all get the same simulated data
set.seed(1414111)
x1 <- rnorm(100, 0, 1)
x2 <- seq(-1, 1, length.out = 100)
y <- 4 + 0 * x1 + 1 * x2^2 + rnorm(100, 0, 0.1)
df <- tibble(x1 = x1, x2 = x2, y = y)
ggcorr(data = df)
```

Based on the correlation plot, it looks like there is no association between x1 and y or between x2 and y.

Exercise 2.

```{r}
ggplot(data = df, aes(x = x1, y = y)) +
  geom_point()

ggplot(data = df, aes(x = x2, y = y)) +
  geom_point()
```

We see that there actually is a relationship between y and x2: it's just a non-linear relationship. `ggcorr()` is not perfect because it won't pick up on any non-linear relationship (as the correlation coefficient is only used for linear associations).

Your Turn 4. 

```{r}
library(gapminder)
library(tidyverse)
gapminder_df <- gapminder |> filter(year == 2002 | year == 2007)
gapminder_df

## a
ggplot(data = gapminder_df, aes(x = factor(year), 
                                y = lifeExp)) +
  geom_boxplot(colour = "orchid4", fill = "orchid1") +
  labs(x = "Year")
## this is __not__ a great plot for paired data because
## the plot assumes that each observation comprising
## the boxplots are independent (when, in fact,
## each country is represented twice).

## b
gapminder_diff <- gapminder_df |> group_by(country) |>
  summarise(diff_life = diff(lifeExp))
ggplot(gapminder_diff, aes(x = diff_life)) +
  geom_histogram(colour = "darkorchid4",
                 fill = "darkorchid1",
                 bins = 20) +
  theme_minimal()
## this is better than the boxplots but
## it doesn't show the actual life expectancy
## values

gapminder_diff <- gapminder_diff |> mutate(change = 
                           if_else(diff_life > 0,
                                   true = "increase",
                                   false = "decrease"))
## c
gapminder_joined <- left_join(gapminder_df,
                              gapminder_diff)
ggplot(data = gapminder_joined, aes(x = year,
                                y = lifeExp)) +
  geom_line(aes(group = country,
                colour = change),
            alpha = 0.4) +
  theme_minimal() +
  scale_colour_viridis_d()
```